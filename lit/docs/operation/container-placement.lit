\title{Container Placement}{container-placement}

\use-plugin{concourse-docs}

Each \reference{steps}{step} in a build is executed inside a container. The
\reference{web-node} distributes containers across the worker cluster depending
on the configured strategy.

\section{
  \title{\aux{The }\code{volume-locality} strategy}{volume-locality-strategy}

  When using \code{volume-locality}, the \reference{web-node} places
  \reference{task-step} and \reference{put-step} containers on workers where a
  majority of their inputs are already present. \bold{This is the default
  strategy.}

  The advantage of this approach is that it reduces the likelihood that large
  artifacts will have to be streamed from one \reference{worker-node}, through
  the \reference{web-node}, and to the target \reference{worker-node}. For
  large artifacts, this can result in quite a bit of overhead.

  The disadvantage of this approach is that it can sometimes result in builds
  "gravitating" to a particular worker and overloading it, at least until the
  resource caches warm across the worker pool.

  If your builds tend to be light on artifacts and heavy on task execution, you
  may want to try the \reference{fewest-build-containers-strategy} instead.
}

\section{
  \title{\aux{The }\code{fewest-build-containers} strategy}{fewest-build-containers-strategy}

  When using the \code{fewest-build-containers} strategy, step containers are
  placed on the worker that has the fewest build containers (i.e. containers
  for other steps of other builds).

  To use this strategy, set the following env var on the \reference{web-node}:

  \codeblock{bash}{{{
  CONCOURSE_CONTAINER_PLACEMENT_STRATEGY=fewest-build-containers
  }}}
}

\section{
  \title{\aux{The }\code{random} strategy}{random-strategy}

  With the \code{random} strategy, the \reference{web-node} places \code{get},
  \code{put} and \code{task} containers on any worker, ignoring any affinity.

  As this is truly random, this will be fine until one day it's not fine.

  To use this strategy, set the following env var on the \reference{web-node}:

  \codeblock{bash}{{{
  CONCOURSE_CONTAINER_PLACEMENT_STRATEGY=random
  }}}
}

\section{
  \title{\aux{The }\code{limit-active-tasks} strategy}{limit-active-tasks-strategy}
  \warn{\code{limit-active-tasks} is an \bold{experimental} feature.}

  When selecting the \code{limit-active-tasks} placement strategy, each \code{task}
  executed on a worker will increase the number of "active tasks" on that worker
  by one. When the task completes the number is decreased by one.
  The \reference{web-node} then places \code{get}, \code{put} and \code{task}
  containers on the worker that currently has the \italic{least amount of active tasks}.

  Additionally \code{max-active-tasks-per-worker} can be set to be an integer of 1 or more,
  in which case a worker will not execute more than that amount of \bold{tasks}.
  A value of 0 means that there is no limit on the maximum number of active tasks on the workers.
  If no worker can be selected because all of them already have \code{max-active-tasks-per-worker}
  active tasks, then the task will wait for a free worker, periodically polling the pool.
  The metric \code{concourse_tasks_waiting} is emitted to monitor these events.
  Note that the parameter does not apply to \code{get} and \code{put} steps which will always
  be scheduled on the worker with the fewest active tasks.

  \codeblock{bash}{{{
  CONCOURSE_CONTAINER_PLACEMENT_STRATEGY=limit-active-tasks
  }}}
  and, optionally
  \codeblock{bash}{{{
  CONCOURSE_MAX_ACTIVE_TASKS_PER_WORKER=1
  }}}
}
